doParallel::registerDoParallel()
# Register the metrics we want to evaluate
set.seed(123)
book_metrics <- metric_set(sens, accuracy, spec)
book_rs <- fit_resamples(book_wf, resamples = book_folds, metrics = book_metrics)
install.packages("LiblineaR")
# Do paralel processing
doParallel::registerDoParallel()
# Register the metrics we want to evaluate
set.seed(123)
book_metrics <- metric_set(sens, accuracy, spec)
book_rs <- fit_resamples(book_wf, resamples = book_folds, metrics = book_metrics)
# We now collect the metrics
collect_metrics(book_rs)
?last_fit
book_last_fit <- last_fit(book_wf, split = book_split, metrics = book_metrics)
book_lf_metrics <- collect_metrics(book_last_fit)
book_lf_metrics
book_last_fit
book_last_fit$splits
book_last_fit
book_last_fit$id
book_last_fit
View(book_last_fit)
tidy(book_last_fit)
book_lf_metrics
book_last_fit
book_last_fit$.predictions
book_last_fit$.metrics
book_lf_metrics
collect_predictions(book_last_fit)
collect_predictions(book_last_fit)
(collect_predictions(book_last_fit))
dim(collect_predictions(book_last_fit))
glimpse(collect_predictions(book_last_fit))
collect_predictions(book_last_fit) %>%
conf_mat(.pred_class, total_weeks)
# Loading libraries
library(tidyverse)
# Loading data
nyt_titles <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-10/nyt_titles.tsv')
# Glimpse function
glimpse(nyt_titles)
library(tidymodels)
set.seed(123)
book_split <- nyt_titles %>%
transmute(author,
total_weeks = if_else(total_weeks > 4, "long", "short")) %>%
na.omit() %>%
initial_split(strata = total_weeks)
# Separating test and training groups
books_train <- training(book_split)
books_test <- testing(book_split)
# Doing cross-validation
book_folds <- vfold_cv(books_train, strata = total_weeks)
book_folds
?glimpse
# Just to take a glimpse
prep(books_recipe) %>% bake(new_data = NULL) %>% glimpse() %>% select(1:4)
knitr::opts_chunk$set(echo = TRUE)
# Loading libraries
library(tidyverse)
# Loading data
nyt_titles <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-10/nyt_titles.tsv')
# Glimpse function
glimpse(nyt_titles)
# Loading libraries
library(tidyverse)
# Loading data
nyt_titles <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-10/nyt_titles.tsv')
# Glimpse function
glimpse(nyt_titles)
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
# Loading libraries
library(tidyverse)
# Loading data
nyt_titles <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-10/nyt_titles.tsv')
# Glimpse function
glimpse(nyt_titles)
sessioninfo::package_info
install.packages("sessioninfo")
sessioninfo::package_info
sessioninfo::package_info()
nyt_titles %>%
ggplot(aes(total_weeks))+
geom_histogram()
```{r size = "small}
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
# Loading libraries
library(tidyverse)
# Loading data
nyt_titles <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-10/nyt_titles.tsv')
# Glimpse function
glimpse(nyt_titles)
nyt_titles %>%
ggplot(aes(total_weeks))+
geom_histogram()
summary(nyt_titles$total_weeks)
nyt_titles %>%
filter(total_weeks >= 100) %>%
arrange(desc(total_weeks)) %>%
select(author, title, total_weeks, year) %>%
top_n(10)
nyt_titles %>%
group_by(author) %>%
summarise(n = n(),
median_total_weeks = median(total_weeks)) %>%
arrange(-(n))
library(tidymodels)
set.seed(123)
book_split <- nyt_titles %>%
transmute(author,
total_weeks = if_else(total_weeks > 4, "long", "short")) %>%
na.omit() %>%
initial_split(strata = total_weeks)
# Separating test and training groups
books_train <- training(book_split)
books_test <- testing(book_split)
# Doing cross-validation
book_folds <- vfold_cv(books_train, strata = total_weeks)
book_folds
books_train %>% count(total_weeks)
library(textrecipes)
# Creating the specification of the model
svm_spec <- svm_linear(mode = "classification")
# Creating the recipe for pre-processing the data
books_recipe <- recipe(total_weeks ~ author, data = books_train) %>%
step_tokenize_wordpiece(author, max_chars = 10) %>%
step_tokenfilter(author, max_tokens = 100) %>%
step_tf(author) %>%
step_normalize(all_numeric_predictors())
# Just to take a glimpse
prep(books_recipe) %>% bake(new_data = NULL) %>% glimpse()
book_wf <- workflow(preprocessor = books_recipe, spec = svm_spec)
book_wf
# Do paralel processing
doParallel::registerDoParallel()
# Register the metrics we want to evaluate
set.seed(123)
book_metrics <- metric_set(sens, accuracy, spec)
book_rs <- fit_resamples(book_wf, resamples = book_folds, metrics = book_metrics)
# We now collect the metrics
collect_metrics(book_rs)
book_last_fit <- last_fit(book_wf, split = book_split, metrics = book_metrics)
book_lf_metrics <- collect_metrics(book_last_fit)
# Seeing the confusion matrix
collect_predictions(book_last_fit) %>%
conf_mat(.pred_class, total_weeks)
# Extracting the final model
final_svm_model <- extract_workflow(book_last_fit)
# Testing into (possible) new data
augment(final_svm_model, new_data = slice_sample(books_test, n = 2))
final_svm_model
tudy(final_svm_model)
tidy(final_svm_model)
tidy(final_svm_model) %>%
slice_max(abs(estimate), n = 15) %>%
mutate(term = str_remove_all(term, "tf_author_")) %>%
mutate(term = fct_reorder(term, abs(estimate)))
tidy(final_svm_model) %>%
slice_max(abs(estimate), n = 15) %>%
mutate(term = str_remove_all(term, "tf_author_")) %>%
mutate(term = fct_reorder(term, abs(estimate))) %>%
ggplot(aes(x = abs(estimate), y = term))+
geom_col()
tidy(final_svm_model) %>%
slice_max(abs(estimate), n = 15) %>%
mutate(term = str_remove_all(term, "tf_author_")) %>%
mutate(term = fct_reorder(term, abs(estimate))) %>%
ggplot(aes(x = abs(estimate), y = term, fill = estimate > 0))+
geom_col()
tidy(final_svm_model) %>%
slice_max(abs(estimate), n = 15) %>%
mutate(term = str_remove_all(term, "tf_author_")) %>%
mutate(term = fct_reorder(term, abs(estimate))) %>%
ggplot(aes(x = abs(estimate), y = term, fill = estimate > 0))+
geom_col()+
scale_fill_discrete(labesl = c("Fewer Weeks", "More Weeks"))
tidy(final_svm_model) %>%
slice_max(abs(estimate), n = 15) %>%
mutate(term = str_remove_all(term, "tf_author_")) %>%
mutate(term = fct_reorder(term, abs(estimate))) %>%
ggplot(aes(x = abs(estimate), y = term, fill = estimate > 0))+
geom_col()+
scale_fill_discrete(labels = c("Fewer Weeks", "More Weeks"))
tidy(final_svm_model) %>%
slice_max(abs(estimate), n = 15) %>%
mutate(term = str_remove_all(term, "tf_author_")) %>%
mutate(term = fct_reorder(term, abs(estimate))) %>%
ggplot(aes(x = abs(estimate), y = term, fill = estimate > 0))+
geom_col()+
scale_fill_discrete(labels = c("Fewer Weeks", "More Weeks"))+
labs(fill = "How many weeks on best seller NYT\n list")
tidy(final_svm_model) %>%
slice_max(abs(estimate), n = 15) %>%
mutate(term = str_remove_all(term, "tf_author_")) %>%
mutate(term = fct_reorder(term, abs(estimate))) %>%
ggplot(aes(x = abs(estimate), y = term, fill = estimate > 0))+
geom_col()+
scale_fill_discrete(labels = c("Fewer Weeks", "More Weeks"))+
labs(fill = "How many weeks on \nbest seller NYT list")
tidy(final_svm_model) %>%
slice_max(abs(estimate), n = 15) %>%
mutate(term = str_remove_all(term, "tf_author_")) %>%
mutate(term = fct_reorder(term, abs(estimate))) %>%
ggplot(aes(x = abs(estimate), y = term, fill = estimate > 0))+
geom_col()+
scale_fill_discrete(labels = c("Fewer Weeks", "More Weeks"))+
labs(fill = "How many weeks on \nbest seller NYT list", y = "Associated Author 'term'", x = "Estimate from SVM Linear Model")
tidy(final_svm_model) %>%
slice_max(abs(estimate), n = 15) %>%
mutate(term = str_remove_all(term, "tf_author_")) %>%
mutate(term = fct_reorder(term, abs(estimate))) %>%
ggplot(aes(x = abs(estimate), y = term, fill = estimate > 0))+
geom_col()+
scale_fill_discrete(labels = c("Fewer Weeks", "More Weeks"))+
labs(fill = "How many weeks on \nbest seller NYT list",
y = "Associated Author 'term'",
x = "Estimate from SVM Linear Model")
tidy(final_svm_model) %>%
slice_max(abs(estimate), n = 15) %>%
mutate(term = str_remove_all(term, "tf_author_")) %>%
mutate(term = fct_reorder(term, abs(estimate))) %>%
ggplot(aes(x = abs(estimate), y = term, fill = estimate > 0))+
geom_col()+
scale_fill_discrete(labels = c("Fewer Weeks", "More Weeks"))+
labs(fill = "How many weeks on \nbest seller NYT list",
y = "Associated Author 'term'",
x = "Estimate from SVM Linear Model",
title = "Final SVM Linear Wordpiece Model")
tidy(final_svm_model) %>%
slice_max(abs(estimate), n = 15) %>%
mutate(term = str_remove_all(term, "tf_author_")) %>%
mutate(term = fct_reorder(term, abs(estimate))) %>%
ggplot(aes(x = abs(estimate), y = term, fill = estimate > 0))+
geom_col()+
scale_fill_discrete(labels = c("Fewer Weeks", "More Weeks"))+
labs(fill = "How many weeks on \nbest seller NYT list",
y = "Associated Author 'term'",
x = "Estimate from SVM Linear Model",
title = "Final SVM Linear Wordpiece Model")+
theme_minimal()
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", message = FALSE)
library(rsample)
doParallel::registerDoParallel()
set.seed(123)
ignore_intervals <-
reg_intervals(expenditure ~ gender + participants, data = sports, times = 500)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", message = FALSE)
library(tidyverse)
sports_raw <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-03-29/sports.csv')
unique(sports_raw$sports)
sports_parsed <- sports_raw %>%
mutate(sports = case_when(
str_detect(sports, "Swimming") ~ "Swimming and Diving",
str_detect(sports, "Swimming") ~ "Swimming and Diving",
str_detect(sports, "Track") ~ "Track",
TRUE ~ sports))
unique(sports_parsed$sports)
sports_raw %>%
group_by(sports) %>%
summarise(n = n()) %>%
arrange(desc(n))
sports <- bind_rows(
sports_parsed %>%
select(year, institution_name, sports,
participants = partic_men,
revenue = rev_men,
expenditure = exp_men) %>%
mutate(gender = "men"),
sports_parsed %>%
select(year, institution_name, sports,
participants = partic_women,
revenue = rev_women,
expenditure = exp_women) %>%
mutate(gender = "women")) %>%
na.omit()
head(sports)
sports %>%
mutate(sports = fct_reorder(sports, expenditure)) %>%
ggplot(aes(x = expenditure, y = sports, color = gender, fill = gender))+
geom_boxplot(position = position_dodge(preserve = "single"), alpha = 0.2)+
scale_x_log10(labels = scales::dollar)+
theme_minimal()+
theme(legend.position = "top", text = element_text(face = "bold"))+
guides(fill = "none")+
labs(x = "Expenditures by team", y = "", color = "Gender", fill = NULL)
ignore_sport <- lm(expenditure ~ gender + participants, data = sports)
account_for_sport <- lm(expenditure ~ gender + participants + sports, data = sports)
library(broom)
bind_rows(
tidy(ignore_sport) %>% mutate(sports = "ignore"),
tidy(account_for_sport) %>%  mutate(sports = "account for sport")
) %>%
filter(!str_detect(term, "sports"), term != "(Intercept)") %>%
ggplot(aes(estimate, term, color = sports))+
geom_vline(xintercept = 0.0, colour = "gray", lty = 5, size = 1.5)+
geom_errorbar(aes(xmin = estimate - 1.96*std.error, xmax = estimate + 1.96*std.error), size = 1, alpha = 0.5)+
scale_x_continuous(labels = scales::dollar)+
theme_minimal()+
theme(legend.position = "bottom", text = element_text(size = 14), title = element_text(size = 15, face = "bold"))+
labs(y = NULL, color = "Account for sports?", x = "Mean change in expenditures", title = "Expenditures on college sports (USA)", subtitle = "linear models considering or not the sports")
library(rsample)
doParallel::registerDoParallel()
set.seed(123)
ignore_intervals <-
reg_intervals(expenditure ~ gender + participants, data = sports, times = 500)
account_for_sport_intervals <-
reg_intervals(expenditure ~ gender + participants + sports, data = sports, times = 500)
ignore_intervals
account_for_sport_intervals
ignore_intervals
bind_rows(
ignore_intervals %>%
mutate(sports = "ignore"),
account_for_sport_intervals %>%
mutate(sports = "account")
)
bind_rows(
ignore_intervals %>%
mutate(sports = "ignore"),
account_for_sport_intervals %>%
filter(!str_detect(term,"sports")) %>%
mutate(sports = "account")
)
bind_rows(
ignore_intervals %>%
mutate(sports = "ignore"),
account_for_sport_intervals %>%
filter(!str_detect(term,"sports")) %>%
mutate(sports = "account")
)
bind_rows(
ignore_intervals %>%
mutate(sports = "ignore"),
account_for_sport_intervals %>%
filter(!str_detect(term,"sports")) %>%
mutate(sports = "account")
) %>%
ggplot(aes(.estimate, term, color = sports))+
geom_vline(xintercept = 0)
bind_rows(
ignore_intervals %>%
mutate(sports = "ignore"),
account_for_sport_intervals %>%
filter(!str_detect(term,"sports")) %>%
mutate(sports = "account")
) %>%
ggplot(aes(.estimate, term, color = sports))+
geom_vline(xintercept = 0, color = "gray", lty = 5)
bind_rows(
ignore_intervals %>%
mutate(sports = "ignore"),
account_for_sport_intervals %>%
filter(!str_detect(term,"sports")) %>%
mutate(sports = "account")
) %>%
ggplot(aes(.estimate, term, color = sports))+
geom_vline(xintercept = 0, color = "gray", lty = 5, size = 1.4)
bind_rows(
ignore_intervals %>%
mutate(sports = "ignore"),
account_for_sport_intervals %>%
filter(!str_detect(term,"sports")) %>%
mutate(sports = "account")
) %>%
ggplot(aes(.estimate, term, color = sports))+
geom_vline(xintercept = 0, color = "gray", lty = 5, size = 1.4)+
geom_errorbar(xmin = .lower, xmax = .upper)
bind_rows(
ignore_intervals %>%
mutate(sports = "ignore"),
account_for_sport_intervals %>%
filter(!str_detect(term,"sports")) %>%
mutate(sports = "account")
) %>%
ggplot(aes(.estimate, term, color = sports))+
geom_vline(xintercept = 0, color = "gray", lty = 5, size = 1.4)+
geom_errorbar(aes(xmin = .lower, xmax = .upper))
bind_rows(
ignore_intervals %>%
mutate(sports = "ignore"),
account_for_sport_intervals %>%
filter(!str_detect(term,"sports")) %>%
mutate(sports = "account")
) %>%
ggplot(aes(.estimate, term, color = sports))+
geom_vline(xintercept = 0, color = "gray", lty = 5, size = 1.4)+
geom_errorbar(aes(xmin = .lower, xmax = .upper), size = 1.4, alpha = 0.4)
bind_rows(
ignore_intervals %>%
mutate(sports = "ignore"),
account_for_sport_intervals %>%
filter(!str_detect(term,"sports")) %>%
mutate(sports = "account")
) %>%
ggplot(aes(.estimate, term, color = sports))+
geom_vline(xintercept = 0, color = "gray", lty = 5, size = 1.4)+
geom_errorbar(aes(xmin = .lower, xmax = .upper), size = 1.4, alpha = 0.5)
bind_rows(
ignore_intervals %>%
mutate(sports = "ignore"),
account_for_sport_intervals %>%
filter(!str_detect(term,"sports")) %>%
mutate(sports = "account")
) %>%
ggplot(aes(.estimate, term, color = sports))+
geom_vline(xintercept = 0, color = "gray", lty = 5, size = 1.4)+
geom_errorbar(aes(xmin = .lower, xmax = .upper), size = 1.4, alpha = 0.5)+
scale_x_continuous(scales::dollar)
bind_rows(
ignore_intervals %>%
mutate(sports = "ignore"),
account_for_sport_intervals %>%
filter(!str_detect(term,"sports")) %>%
mutate(sports = "account")
) %>%
ggplot(aes(.estimate, term, color = sports))+
geom_vline(xintercept = 0, color = "gray", lty = 5, size = 1.4)+
geom_errorbar(aes(xmin = .lower, xmax = .upper), size = 1.4, alpha = 0.5)+
scale_x_continuous(labs = scales::dollar)
bind_rows(
ignore_intervals %>%
mutate(sports = "ignore"),
account_for_sport_intervals %>%
filter(!str_detect(term,"sports")) %>%
mutate(sports = "account")
) %>%
ggplot(aes(.estimate, term, color = sports))+
geom_vline(xintercept = 0, color = "gray", lty = 5, size = 1.4)+
geom_errorbar(aes(xmin = .lower, xmax = .upper), size = 1.4, alpha = 0.5)+
scale_x_continuous(labs = scales::dollar)
bind_rows(
ignore_intervals %>%
mutate(sports = "ignore"),
account_for_sport_intervals %>%
filter(!str_detect(term,"sports")) %>%
mutate(sports = "account")
) %>%
ggplot(aes(.estimate, term, color = sports))+
geom_vline(xintercept = 0, color = "gray", lty = 5, size = 1.4)+
geom_errorbar(aes(xmin = .lower, xmax = .upper), size = 1.4, alpha = 0.5)+
scale_x_continuous(labels = scales::dollar)
bind_rows(
ignore_intervals %>%
mutate(sports = "ignore"),
account_for_sport_intervals %>%
filter(!str_detect(term,"sports")) %>%
mutate(sports = "account")
) %>%
ggplot(aes(.estimate, term, color = sports))+
geom_vline(xintercept = 0, color = "gray", lty = 5, size = 1.4)+
geom_errorbar(aes(xmin = .lower, xmax = .upper), size = 1.4, alpha = 0.5)+
scale_x_continuous(labels = scales::dollar)+
theme_minimal()+
theme(text = element_text(size = 14), title = element_text(face = "bold"))
bind_rows(
ignore_intervals %>%
mutate(sports = "ignore"),
account_for_sport_intervals %>%
filter(!str_detect(term,"sports")) %>%
mutate(sports = "account")
) %>%
ggplot(aes(.estimate, term, color = sports))+
geom_vline(xintercept = 0, color = "gray", lty = 5, size = 1.4)+
geom_errorbar(aes(xmin = .lower, xmax = .upper), size = 1.4, alpha = 0.5)+
scale_x_continuous(labels = scales::dollar)+
theme_minimal()+
theme(text = element_text(size = 14), title = element_text(face = "bold"))+
labs(y = NULL, title = "Bootstrap linear models accounting or not for sports in", subtitle = "USA college sports")
bind_rows(
ignore_intervals %>%
mutate(sports = "ignore"),
account_for_sport_intervals %>%
filter(!str_detect(term,"sports")) %>%
mutate(sports = "account")
) %>%
ggplot(aes(.estimate, term, color = sports))+
geom_vline(xintercept = 0, color = "gray", lty = 5, size = 1.4)+
geom_errorbar(aes(xmin = .lower, xmax = .upper), size = 1.4, alpha = 0.5)+
scale_x_continuous(labels = scales::dollar)+
theme_minimal()+
theme(text = element_text(size = 14), title = element_text(face = "bold"))+
labs(y = NULL, title = "Bootstrap linear models ", subtitle = "accounting or not for sports in USA college sports")
bind_rows(
ignore_intervals %>%
mutate(sports = "ignore"),
account_for_sport_intervals %>%
filter(!str_detect(term,"sports")) %>%
mutate(sports = "account")
) %>%
ggplot(aes(.estimate, term, color = sports))+
geom_vline(xintercept = 0, color = "gray", lty = 5, size = 1.4)+
geom_errorbar(aes(xmin = .lower, xmax = .upper), size = 1.4, alpha = 0.5)+
scale_x_continuous(labels = scales::dollar)+
theme_minimal()+
theme(text = element_text(size = 14), title = element_text(face = "bold"), legend.position = "bottom")+
labs(y = NULL, title = "Bootstrap linear models ", subtitle = "accounting or not for sports in USA college sports", color = "Account for sports?")
bind_rows(
ignore_intervals %>%
mutate(sports = "ignore"),
account_for_sport_intervals %>%
filter(!str_detect(term,"sports")) %>%
mutate(sports = "account")
) %>%
ggplot(aes(.estimate, term, color = sports))+
geom_vline(xintercept = 0, color = "gray", lty = 5, size = 1.4)+
geom_errorbar(aes(xmin = .lower, xmax = .upper), size = 1.4, alpha = 0.5)+
scale_x_continuous(labels = scales::dollar)+
theme_minimal()+
theme(text = element_text(size = 14), title = element_text(face = "bold"), legend.position = "bottom")+
labs(y = NULL, x = "Coefficient estimate",title = "Bootstrap linear models ", subtitle = "accounting or not for sports in USA college sports", color = "Account for sports?")
